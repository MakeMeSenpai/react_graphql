{"ast":null,"code":"var _jsxFileName = \"/Users/aspin25/Coding/Term 9/react_graphql/src/Components/Weather/weather.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { gql } from '@apollo/client';\nimport { client } from './index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Weather() {\n  _s();\n\n  const [zip, setZip] = useState('');\n  const [weather, setWeather] = useState(null);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Weather\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => {\n        e.preventDefault();\n        getWeather();\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: zip,\n        onChange: e => setZip(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }, this);\n\n  async function getWeather() {\n    try {\n      const json = await client.query({\n        query: gql`\n              query {\n                getWeather(zip:${zip}) {\n                  temperature\n                  description\n                }\n              }\n            `\n      });\n      setWeather(json);\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n}\n\n_s(Weather, \"+BmFesXAgFdTu644WjD9NVj/wXk=\");\n\n_c = Weather;\nexport default Weather;\n\nvar _c;\n\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"sources":["/Users/aspin25/Coding/Term 9/react_graphql/src/Components/Weather/weather.js"],"names":["useState","gql","client","Weather","zip","setZip","weather","setWeather","e","preventDefault","getWeather","target","value","json","query","err","console","log","message"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,GAAT,QAAoB,gBAApB;AACA,SAASC,MAAT,QAAuB,SAAvB;;;AAEA,SAASC,OAAT,GAAmB;AAAA;;AACf,QAAM,CAAEC,GAAF,EAAOC,MAAP,IAAkBL,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAAEM,OAAF,EAAWC,UAAX,IAA0BP,QAAQ,CAAC,IAAD,CAAxC;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA,2BACI;AAAM,MAAA,QAAQ,EAAGQ,CAAD,IAAO;AACnBA,QAAAA,CAAC,CAACC,cAAF;AACAC,QAAAA,UAAU;AAAG,OAFjB;AAAA,8BAGI;AACI,QAAA,KAAK,EAAEN,GADX;AAEI,QAAA,QAAQ,EAAGI,CAAD,IAAOH,MAAM,CAACG,CAAC,CAACG,MAAF,CAASC,KAAV;AAF3B;AAAA;AAAA;AAAA;AAAA,cAHJ,eAOI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;;AAcA,iBAAeF,UAAf,GAA4B;AACxB,QAAI;AACF,YAAMG,IAAI,GAAG,MAAMX,MAAM,CAACY,KAAP,CAAa;AAC9BA,QAAAA,KAAK,EAAEb,GAAI;AACvB;AACA,iCAAiCG,GAAI;AACrC;AACA;AACA;AACA;AACA;AAR0C,OAAb,CAAnB;AAUAG,MAAAA,UAAU,CAACM,IAAD,CAAV;AACD,KAZD,CAYE,OAAME,GAAN,EAAW;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,OAAhB;AACD;AACF;AACJ;;GAnCMf,O;;KAAAA,O;AAqCT,eAAeA,OAAf","sourcesContent":["import { useState } from 'react'\nimport { gql } from '@apollo/client'\nimport { client } from './index'\n\nfunction Weather() {\n    const [ zip, setZip ] = useState('')\n    const [ weather, setWeather ] = useState(null)\n  \n    return (\n        <div className=\"Weather\">\n            <form onSubmit={(e) => {\n                e.preventDefault()\n                getWeather()}}>\n                <input \n                    value={zip}\n                    onChange={(e) => setZip(e.target.value)}\n                />\n                <button type=\"submit\">Submit</button>\n            </form>\n        </div>\n    );\n\n    async function getWeather() {\n        try {\n          const json = await client.query({\n            query: gql`\n              query {\n                getWeather(zip:${zip}) {\n                  temperature\n                  description\n                }\n              }\n            `\n          })\n          setWeather(json)\n        } catch(err) {\n          console.log(err.message)\n        }\n      }\n  }\n\nexport default Weather\n"]},"metadata":{},"sourceType":"module"}